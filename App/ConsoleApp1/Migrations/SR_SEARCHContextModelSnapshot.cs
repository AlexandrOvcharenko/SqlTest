// <auto-generated />
using System;
using ConsoleApp1.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace ConsoleApp1.Migrations
{
    [DbContext(typeof(SR_SEARCHContext))]
    partial class SR_SEARCHContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.11")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("ConsoleApp1.Models.SrDirectoryCountry", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("Value")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("value");


                    b.Property<string>("ValueAbbr")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("value_abbr");



                    b.Property<string>("ValueEng")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("value_eng");
                        

                    b.HasKey("Id");

                    b.ToTable("SR_directory_country");
                });

            modelBuilder.Entity("ConsoleApp1.Models.SrDirectoryPort", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("CodePort")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("code_port");



                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email");
                        

                    b.Property<bool>("IsDisable")
                        .HasColumnType("boolean")
                        .HasColumnName("is_disable");

                    b.Property<string>("NameEng")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name_eng");



                    b.Property<string>("NameUkr")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name_ukr");


                    b.Property<string>("Phone")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("phone");



                    b.Property<string>("PositionCapitanEng")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("position_capitan_eng");



                    b.Property<string>("PositionCapitanUkr")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("position_capitan_ukr");
                        

                    b.HasKey("Id");

                    b.ToTable("SR_directory_port");
                });

            modelBuilder.Entity("ConsoleApp1.Models.SrDirectoryRank", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<int?>("DirectionId")
                        .HasColumnType("integer")
                        .HasColumnName("direction_id");

                    b.Property<bool>("IsDisable")
                        .HasColumnType("boolean")
                        .HasColumnName("is_disable");

                    b.Property<bool>("IsDkk")
                        .HasColumnType("boolean")
                        .HasColumnName("is_dkk");

                    b.Property<string>("NameEng")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name_eng");


                    b.Property<string>("NameUkr")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name_ukr");
                        

                    b.Property<double?>("Price")
                        .HasColumnType("double precision")
                        .HasColumnName("price");

                    b.Property<int?>("Priority")
                        .HasColumnType("integer")
                        .HasColumnName("priority");

                    b.Property<int?>("TypeDocumentId")
                        .HasColumnType("integer")
                        .HasColumnName("type_document_id");

                    b.Property<int?>("TypeRankId")
                        .HasColumnType("integer")
                        .HasColumnName("type_rank_id");

                    b.Property<string>("Uuid")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("uuid");
                        

                    b.HasKey("Id");

                    b.ToTable("SR_directory_rank");
                });

            modelBuilder.Entity("ConsoleApp1.Models.SrDirectoryStatusdocument", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<bool>("CanUserChange")
                        .HasColumnType("boolean")
                        .HasColumnName("can_user_change");

                    b.Property<string>("ForService")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("for_service");
                        

                    b.Property<bool>("IsDisable")
                        .HasColumnType("boolean")
                        .HasColumnName("is_disable");

                    b.Property<string>("NameEng")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name_eng");



                    b.Property<string>("NameUkr")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name_ukr");
                        

                    b.HasKey("Id");

                    b.ToTable("SR_directory_statusdocument");
                });

            modelBuilder.Entity("ConsoleApp1.Models.SrDirectoryTypedocument", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<int?>("Code")
                        .HasColumnType("integer")
                        .HasColumnName("code");

                    b.Property<string>("ForService")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("for_service");
                        

                    b.Property<bool>("IsDisable")
                        .HasColumnType("boolean")
                        .HasColumnName("is_disable");

                    b.Property<string>("NameEng")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name_eng");



                    b.Property<string>("NameUkr")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name_ukr");
                        

                    b.Property<double?>("Price")
                        .HasColumnType("double precision")
                        .HasColumnName("price");

                    b.HasKey("Id");

                    b.ToTable("SR_directory_typedocument");
                });

            modelBuilder.Entity("ConsoleApp1.Models.SrQdServiceInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("ID")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Link")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("LINK");
                        

                    b.Property<int?>("MrId")
                        .HasColumnType("integer")
                        .HasColumnName("MR_ID");

                    b.Property<int?>("PrId")
                        .HasColumnType("integer")
                        .HasColumnName("PR_ID");

                    b.Property<int>("QdId")
                        .HasColumnType("integer")
                        .HasColumnName("QD_ID");

                    b.HasKey("Id");

                    b.HasIndex("QdId");

                    b.ToTable("SR_QD_SERVICE_INFO");
                });

            modelBuilder.Entity("ConsoleApp1.Models.SrQualifDoc", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("ID")
                        .HasComment("Идентификатор записи");

                    b.Property<int>("DStatus")
                        .HasColumnType("integer")
                        .HasColumnName("D_STATUS")
                        .HasComment("Статус документа");

                    b.Property<int>("DType")
                        .HasColumnType("integer")
                        .HasColumnName("D_TYPE")
                        .HasComment("Тип документа");

                    b.Property<int>("DnNumber")
                        .HasColumnType("integer")
                        .HasColumnName("DN_NUMBER")
                        .HasComment("Составной номер документа. Номер документа");

                    b.Property<int>("DnPort")
                        .HasColumnType("integer")
                        .HasColumnName("DN_PORT")
                        .HasComment("Составной номер документа. Код порта выдачи документа");

                    b.Property<int>("DnYaer")
                        .HasColumnType("integer")
                        .HasColumnName("DN_YAER")
                        .HasComment("Составной номер документа. Год выдачи документа");

                    b.Property<DateTime>("DtIssue")
                        .HasColumnType("date")
                        .HasColumnName("DT_ISSUE")
                        .HasComment("Дата выдачи документа");

                    b.Property<int?>("PortCapitan")
                        .HasColumnType("integer")
                        .HasColumnName("PORT_CAPITAN")
                        .HasComment("Капитан порта выдавшего документ");

                    b.Property<int>("Rank")
                        .HasColumnType("integer")
                        .HasColumnName("RANK")
                        .HasComment("Звание");

                    b.Property<string>("SbLeter")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("SB_LETER")
                        .HasComment("Серия бланка строгой отчетности ");
                        

                    b.Property<int?>("SbNumber")
                        .HasColumnType("integer")
                        .HasColumnName("SB_NUMBER")
                        .HasComment("Номер бланка строгой отчетности");

                    b.Property<int?>("SfCs")
                        .HasColumnType("integer")
                        .HasColumnName("SF_CS")
                        .HasComment("Гражданство");

                    b.Property<DateTime>("SfDob")
                        .HasColumnType("date")
                        .HasColumnName("SF_DOB")
                        .HasComment("Дата рождения");

                    b.Property<string>("SfFn")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("SF_FN")
                        .HasComment("Seafarer first name");



                    b.Property<string>("SfLn")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("SF_LN")
                        .HasComment("Seafarer last name");



                    b.Property<string>("SfName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("SF_NAME")
                        .HasComment("Имя моряка (укр.)");


                    b.Property<string>("SfPatronymic")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("SF_PATRONYMIC")
                        .HasComment("Отчество (укр.)");



                    b.Property<string>("SfSurname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("SF_SURNAME")
                        .HasComment("Фамилия моряка (укр.)");
                        

                    b.HasKey("Id");

                    b.HasIndex("DStatus");

                    b.HasIndex("DType");

                    b.HasIndex("DnPort");

                    b.HasIndex("Rank");

                    b.HasIndex("SfCs");

                    b.ToTable("SR_QUALIF_DOCS");
                });

            modelBuilder.Entity("ConsoleApp1.Models.SrQdServiceInfo", b =>
                {
                    b.HasOne("ConsoleApp1.Models.SrQualifDoc", "Qd")
                        .WithMany("SrQdServiceInfos")
                        .HasForeignKey("QdId")
                        .HasConstraintName("FK_SR_QD_SERVICE_INFO_SR_QUALIF_DOCS")
                        .IsRequired();

                    b.Navigation("Qd");
                });

            modelBuilder.Entity("ConsoleApp1.Models.SrQualifDoc", b =>
                {
                    b.HasOne("ConsoleApp1.Models.SrDirectoryStatusdocument", "DStatusNavigation")
                        .WithMany("SrQualifDocs")
                        .HasForeignKey("DStatus")
                        .HasConstraintName("FK_SR_QUALIF_DOCS_SR_directory_statusdocument")
                        .IsRequired();

                    b.HasOne("ConsoleApp1.Models.SrDirectoryTypedocument", "DTypeNavigation")
                        .WithMany("SrQualifDocs")
                        .HasForeignKey("DType")
                        .HasConstraintName("FK_SR_QUALIF_DOCS_SR_directory_typedocument")
                        .IsRequired();

                    b.HasOne("ConsoleApp1.Models.SrDirectoryPort", "DnPortNavigation")
                        .WithMany("SrQualifDocs")
                        .HasForeignKey("DnPort")
                        .HasConstraintName("FK_SR_QUALIF_DOCS_SR_directory_port")
                        .IsRequired();

                    b.HasOne("ConsoleApp1.Models.SrDirectoryRank", "RankNavigation")
                        .WithMany("SrQualifDocs")
                        .HasForeignKey("Rank")
                        .HasConstraintName("FK_SR_QUALIF_DOCS_SR_directory_rank")
                        .IsRequired();

                    b.HasOne("ConsoleApp1.Models.SrDirectoryCountry", "SfCsNavigation")
                        .WithMany("SrQualifDocs")
                        .HasForeignKey("SfCs")
                        .HasConstraintName("FK_SR_QUALIF_DOCS_SR_directory_country");

                    b.Navigation("DnPortNavigation");

                    b.Navigation("DStatusNavigation");

                    b.Navigation("DTypeNavigation");

                    b.Navigation("RankNavigation");

                    b.Navigation("SfCsNavigation");
                });

            modelBuilder.Entity("ConsoleApp1.Models.SrDirectoryCountry", b =>
                {
                    b.Navigation("SrQualifDocs");
                });

            modelBuilder.Entity("ConsoleApp1.Models.SrDirectoryPort", b =>
                {
                    b.Navigation("SrQualifDocs");
                });

            modelBuilder.Entity("ConsoleApp1.Models.SrDirectoryRank", b =>
                {
                    b.Navigation("SrQualifDocs");
                });

            modelBuilder.Entity("ConsoleApp1.Models.SrDirectoryStatusdocument", b =>
                {
                    b.Navigation("SrQualifDocs");
                });

            modelBuilder.Entity("ConsoleApp1.Models.SrDirectoryTypedocument", b =>
                {
                    b.Navigation("SrQualifDocs");
                });

            modelBuilder.Entity("ConsoleApp1.Models.SrQualifDoc", b =>
                {
                    b.Navigation("SrQdServiceInfos");
                });
#pragma warning restore 612, 618
        }
    }
}
